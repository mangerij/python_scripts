{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Load the important libraries. Note to plot, we need to unload the miniconda module from the MOOSE environment:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Vendor:  Continuum Analytics, Inc.\n",
      "Package: mkl\n",
      "Message: trial mode expires in 30 days\n",
      "numbapro:1: ImportWarning: The numbapro package is deprecated in favour of the accelerate package. Please update your code to use equivalent functions from accelerate.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "------------------------------libraries detection-------------------------------\n",
      "Finding cublas\n",
      "\tlocated at /home/john/anaconda2/lib/libcublas.so.7.0.28\n",
      "\ttrying to open library...\tok\n",
      "Finding cusparse\n",
      "\tlocated at /home/john/anaconda2/lib/libcusparse.so.7.0.28\n",
      "\ttrying to open library...\tok\n",
      "Finding cufft\n",
      "\tlocated at /home/john/anaconda2/lib/libcufft.so.7.0.35\n",
      "\ttrying to open library...\tok\n",
      "Finding curand\n",
      "\tlocated at /home/john/anaconda2/lib/libcurand.so.7.0.28\n",
      "\ttrying to open library...\tok\n",
      "Finding nvvm\n",
      "\tlocated at /home/john/anaconda2/lib/libnvvm.so.3.0.0\n",
      "\ttrying to open library...\tok\n",
      "\tfinding libdevice for compute_20...\tok\n",
      "\tfinding libdevice for compute_30...\tok\n",
      "\tfinding libdevice for compute_35...\tok\n",
      "-------------------------------hardware detection-------------------------------\n",
      "Found 1 CUDA devices\n",
      "id 0        GeForce GTX 870M                              [SUPPORTED]\n",
      "                      compute capability: 3.0\n",
      "                           pci device id: 0\n",
      "                              pci bus id: 1\n",
      "Summary:\n",
      "\t1/1 devices are supported\n",
      "PASSED\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "from timeit import default_timer as timer\n",
    "from matplotlib import pyplot\n",
    "import math\n",
    "import numbapro # We use check_cuda() and vectorize\n",
    "from numbapro import vectorize, autojit, jit, cuda #vectorize for functions and cuda for cuda-u functions\n",
    "numbapro.check_cuda()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Running on GPU: GeForce GTX 870M\n",
      "Compute capability:  3.0 (Numba requires >= 2.0)\n",
      "Number of streaming multiprocessor: 7\n",
      "Number of cores per mutliprocessor: 192\n",
      "Number of cores on GPU: 1344\n"
     ]
    }
   ],
   "source": [
    "import numba.cuda  \n",
    "#this line from nbviewer.ipython.org/github/ContinuumIO/numbapro-examples/blob/master/webinars/2014_06_17/intro_to_gpu_python.ipynb\n",
    "my_gpu = numba.cuda.get_current_device()\n",
    "print \"Running on GPU:\", my_gpu.name\n",
    "cores_per_capability = {\n",
    "    1: 8,\n",
    "    2: 32,\n",
    "    3: 192,\n",
    "}\n",
    "cc = my_gpu.compute_capability\n",
    "print \"Compute capability: \", \"%d.%d\" % cc, \"(Numba requires >= 2.0)\"\n",
    "majorcc = cc[0]\n",
    "print \"Number of streaming multiprocessor:\", my_gpu.MULTIPROCESSOR_COUNT\n",
    "cores_per_multiprocessor = cores_per_capability[majorcc]\n",
    "print \"Number of cores per mutliprocessor:\", cores_per_multiprocessor\n",
    "total_cores = cores_per_multiprocessor * my_gpu.MULTIPROCESSOR_COUNT\n",
    "print \"Number of cores on GPU:\", total_cores"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def iter_loadtxt(filename, delimiter=',', skiprows=1, dtype=float):\n",
    "    def iter_func():\n",
    "        with open(filename, 'r') as infile:\n",
    "            for _ in range(skiprows):\n",
    "                next(infile)\n",
    "            for line in infile:\n",
    "                line = line.rstrip().split(delimiter)\n",
    "                for item in line:\n",
    "                    yield dtype(item)\n",
    "        iter_loadtxt.rowlength = len(line)\n",
    "\n",
    "    data = np.fromiter(iter_func(), dtype=dtype)\n",
    "    data = data.reshape((-1, iter_loadtxt.rowlength))\n",
    "    return data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Correlation function took 6.856306 seconds\n",
      "Correlation function took 8.636047 seconds\n",
      "Correlation function took 11.475216 seconds\n",
      "Correlation function took 15.230894 seconds\n",
      "Correlation function took 18.516755 seconds\n",
      "Correlation function took 25.754067 seconds\n",
      "Correlation function took 31.591189 seconds\n",
      "Correlation function took 32.404009 seconds\n",
      "Correlation function took 39.486959 seconds\n",
      "Correlation function took 49.906812 seconds\n",
      "Correlation function took 56.423196 seconds\n",
      "Correlation function took 69.420290 seconds\n",
      "Correlation function took 91.396321 seconds\n",
      "Correlation function took 104.393568 seconds\n",
      "Correlation function took 130.417927 seconds\n",
      "Correlation function took 176.614432 seconds\n",
      "Correlation function took 207.624661 seconds\n",
      "Correlation function took 218.468251 seconds\n",
      "Correlation function took 225.850659 seconds\n",
      "Correlation function took 242.397990 seconds\n",
      "Correlation function took 293.339138 seconds\n",
      "Correlation function took 324.132494 seconds\n",
      "Correlation function took 402.764100 seconds\n",
      "Correlation function took 417.715850 seconds\n",
      "Correlation function took 461.785450 seconds\n"
     ]
    }
   ],
   "source": [
    "#This code will import nodal polar vector values using the above iterative loader, define the GPU vectorized functions, \n",
    "# and then perform the correlation.\n",
    "\n",
    "@vectorize([\"float64(float64, float64, float64)\"], target='gpu') \n",
    "def Rfunct(r0, r1, r2):\n",
    "    return (r0 * r0 +  r1 * r1 + r2 * r2)**(0.5)\n",
    "\n",
    "@vectorize([\"float64(float64, float64, float64, float64, float64, float64)\"], target='gpu') \n",
    "def Corrfunct(polar0f, polar1f, polar2f, arg0, arg1, arg2):\n",
    "    return 1/(0.8 * 0.8) * (polar0f * arg0 + polar1f * arg1 + polar2f * arg2);\n",
    "\n",
    "for t in range(1,1):\n",
    "    file_load = iter_loadtxt('/media/john/My Passport/Sphere project data/run2--curl/data'+repr(t)+'.csv',delimiter=',',skiprows=1,dtype=float)\n",
    "    \n",
    "    polar0 = np.asarray([row[1] for row in file_load])\n",
    "    polar1 = np.asarray([row[2] for row in file_load])\n",
    "    polar2 = np.asarray([row[3] for row in file_load])\n",
    "     \n",
    "    polar0ave = np.mean(polar0)\n",
    "    polar1ave = np.mean(polar1)\n",
    "    polar2ave = np.mean(polar2)\n",
    "    \n",
    "    Polar0fluct = np.asarray(polar0 - polar0ave)\n",
    "    Polar1fluct = np.asarray(polar1 - polar1ave)\n",
    "    Polar2fluct = np.asarray(polar2 - polar2ave)\n",
    "    \n",
    "    r0 = np.asarray([row[4] for row in file_load])\n",
    "    r1 = np.asarray([row[5] for row in file_load])\n",
    "    r2 = np.asarray([row[6] for row in file_load])\n",
    "    \n",
    "    Cr = np.zeros(len(polar0));\n",
    "    R = np.zeros(len(polar0));\n",
    "\n",
    "    start = timer()\n",
    "    R = Rfunct(r0, r1, r2)\n",
    "    for k in xrange(len(polar0)-1):\n",
    "        Cr += Corrfunct(Polar0fluct, Polar1fluct, Polar2fluct, Polar0fluct[k], Polar1fluct[k], Polar2fluct[k])\n",
    "    vectoradd_time = timer() - start\n",
    "    \n",
    "    np.savetxt(\"/media/john/My Passport/Sphere project data/run2--curl/Cr_\"+repr(t)+\".csv\", Cr, delimiter=\",\")\n",
    "    np.savetxt(\"/media/john/My Passport/Sphere project data/run2--curl/r_\"+repr(t)+\".csv\", R, delimiter=\",\")\n",
    "    \n",
    "    print(\"Correlation function took %f seconds\" % vectoradd_time)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-0.20504 , -0.22127 , -0.21911 , ..., -0.055346, -0.096231, -0.11383 ])"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "polar0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "file_load = iter_loadtxt('/media/john/My Passport/Sphere project data/run2--curl/data4.csv',delimiter=',',skiprows=1,dtype=float)\n",
    "    \n",
    "polar0 = np.asarray([row[1] for row in file_load])\n",
    "polar1 = np.asarray([row[2] for row in file_load])\n",
    "polar2 = np.asarray([row[3] for row in file_load])\n",
    "     \n",
    "polar0ave = np.mean(polar0)\n",
    "polar1ave = np.mean(polar1)\n",
    "polar2ave = np.mean(polar2)\n",
    "    \n",
    "Polar0fluct = np.asarray(polar0 - polar0ave)\n",
    "Polar1fluct = np.asarray(polar1 - polar1ave)\n",
    "Polar2fluct = np.asarray(polar2 - polar2ave)\n",
    "    \n",
    "r0 = np.asarray([row[4] for row in file_load])\n",
    "r1 = np.asarray([row[5] for row in file_load])\n",
    "r2 = np.asarray([row[6] for row in file_load])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-0.7439, -0.55  , -1.2109, ..., -5.7475,  4.2625, -1.9002])"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "@vectorize([\"float64(float64, float64, float64)\"], target='gpu') \n",
    "def Rfunct(r0, r1, r2):\n",
    "    return (r0 * r0 +  r1 * r1 + r2 * r2)**(0.5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-6-1c7f1dc242eb>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[0;32m      4\u001b[0m \u001b[1;32mfor\u001b[0m \u001b[0mj\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mlen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mpolar0\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      5\u001b[0m     \u001b[1;32mfor\u001b[0m \u001b[0mk\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mlen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mpolar0\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 6\u001b[1;33m         \u001b[0mdist\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mj\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mk\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;33m(\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mr0\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mj\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m-\u001b[0m \u001b[0mr0\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mk\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m**\u001b[0m\u001b[1;36m2\u001b[0m \u001b[1;33m+\u001b[0m \u001b[1;33m(\u001b[0m\u001b[0mr1\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mj\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m-\u001b[0m \u001b[0mr1\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mk\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m**\u001b[0m\u001b[1;36m2\u001b[0m \u001b[1;33m+\u001b[0m \u001b[1;33m(\u001b[0m\u001b[0mr2\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mj\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m-\u001b[0m \u001b[0mr2\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mk\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m**\u001b[0m\u001b[1;36m2\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m**\u001b[0m\u001b[1;36m0.5\u001b[0m\u001b[1;33m;\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      7\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      8\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "#distance function\n",
    "dist = np.zeros((len(polar0),len(polar0)));\n",
    "                \n",
    "for j in range(0,len(polar0)):\n",
    "    for k in range(0,len(polar0)):\n",
    "        dist[j,k] = ((r0[j] - r0[k])**2 + (r1[j] - r1[k])**2 + (r2[j] - r2[k])**2)**0.5;\n",
    "\n",
    "\n",
    "\n",
    "#probably could \"gpuize\" the outer or inner loop here"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "np.savetxt(\"/media/john/My Passport/Sphere project data/run2--curl/distfunct.csv\", dist, delimiter=\",\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9661524334125543"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dist[0,5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "@vectorize([\"float64(float64, float64, float64, float64, float64, float64)\"], target='gpu') \n",
    "def distfunct(r0, r1, r2, arg0, arg1, arg2):\n",
    "    return ((r0 - arg0)**2 + (r1 - arg1)**2 + (r2 - arg2)**2)**0.5;"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 0.81082662,  0.        ,  0.7399886 , ...,  5.58453024,\n",
       "        5.6401178 ,  3.88298307])"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dist[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-0.22126999999999999"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "polar0[1] #sorted(dist[1]) #"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#first bin up to get radial distribution function, \n",
    "#then use the bins to count the number of polar vectors and save their indices\n",
    "#then dot them, sum them plot vs r"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 0.81082662,  0.        ,  0.7399886 , ...,  5.58453024,\n",
       "        5.6401178 ,  3.88298307])"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dist[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "#[Nbin, rtest1] = np.histogram(dist[1], bins=50, range=None, normed=False, weights=None, density=None)\n",
    "\n",
    "# data[1,3][0] is the distance between node 1 and node 3, \n",
    "# data[1,3][1] is the value of the dot product of the vector at node 1 and node 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data[0,0][0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 0.81082662,  0.15475446])"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data[1,0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "Let's start at one point(index i = 1), histogram the distances as we scan along (index j != 1):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "[Nbin, rtest1] = np.histogram(dist_vec, bins = 35, range=None, normed=False, weights=None, density=None)\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "plt.plot(rtest1[0:len(Nbin)],Nbin,'r.');\n",
    "plt.ylabel('N', fontsize = 27); plt.xlabel('r [nm]', fontsize = 27);\n",
    "plt.tick_params(axis='both', which='major', labelsize=20)\n",
    "plt.tick_params(axis='both', which='minor', labelsize=20)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([  1,   0,   8,   8,  21,  21,  41,  45,  71,  68, 102, 109, 135,\n",
       "       164, 173, 202, 246, 260, 302, 313, 364, 414, 449, 478, 514, 570,\n",
       "       605, 663, 748, 716, 815, 715, 604, 352, 332])"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Nbin"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "51"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(rtest1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 0.        ,  0.21638577,  0.43277153,  0.6491573 ,  0.86554306,\n",
       "        1.08192883,  1.2983146 ,  1.51470036,  1.73108613,  1.94747189,\n",
       "        2.16385766,  2.38024343,  2.59662919,  2.81301496,  3.02940072,\n",
       "        3.24578649,  3.46217226,  3.67855802,  3.89494379,  4.11132955,\n",
       "        4.32771532,  4.54410109,  4.76048685,  4.97687262,  5.19325838,\n",
       "        5.40964415,  5.62602992,  5.84241568,  6.05880145,  6.27518721,\n",
       "        6.49157298,  6.70795875,  6.92434451,  7.14073028,  7.35711604,\n",
       "        7.57350181])"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rtest1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "@vectorize([\"float64(float64, float64, float64, float64, float64, float64)\"], target='gpu') \n",
    "def distfunct(r0, r1, r2, arg0, arg1, arg2):\n",
    "    return ((r0 - arg0)**2 + (r1 - arg1)**2 + (r2 - arg2)**2)**0.5;\n",
    "\n",
    "dist = np.zeros((len(polar0),len(polar0)))\n",
    "for k in xrange(len(r0)):\n",
    "    dist[k] += distfunct(r0, r1, r2, r0[k], r1[k], r2[k])\n",
    "\n",
    "data = np.zeros((len(polar0),len(polar0),2)) \n",
    "\n",
    "#the below loop is expensive...\n",
    "\n",
    "#store the dot product and the distance between the two nodes we are dotting\n",
    "\n",
    "for i in xrange(len(polar0)):\n",
    "    for j in xrange(len(polar0)):\n",
    "        if i != j:\n",
    "            data[i,j] = np.array([dist[i][j] , polar0[i] * polar0[j] + polar1[i] * polar1[j] + polar2[i] * polar2[j]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "\n",
    "bin_number = 20\n",
    "cr = np.zeros((6,bin_number))\n",
    "\n",
    "for i in range(0,4):\n",
    "    dist_vec = np.zeros(len(polar0))\n",
    "    dot_vec = np.zeros(len(polar0))\n",
    "\n",
    "    for k in range(0,len(polar0)):\n",
    "        if k != i:\n",
    "            dist_vec[k] = data[i,k][0]\n",
    "            dot_vec[k] = data[i,k][1]\n",
    "\n",
    "    [Nbin, rtest] = np.histogram(dist_vec, bins = bin_number, range=None, normed=False, weights=None, density=None)\n",
    "\n",
    "    sum_vec = np.zeros((len(polar0),len(Nbin)))\n",
    "    \n",
    "    for n in range(0,len(Nbin)):\n",
    "        for j in range(0,len(polar0)):\n",
    "            if rtest[n] <= dist_vec[j] and dist_vec[j] <= rtest[n+1]:\n",
    "                #print dist_vec[j], dot_vec[j]\n",
    "                sum_vec[i,n] += dot_vec[j]\n",
    "\n",
    "    cr[i,:] = sum_vec[i,:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "43.007796029210368"
      ]
     },
     "execution_count": 114,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.mean(cr[0:4,bin_number-1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\n",
       "        0.,  0.,  0.,  0.,  0.,  0.,  0.])"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sum_total[0,:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "43.00779603"
      ]
     },
     "execution_count": 116,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(39.69659216+47.74092078+29.29923654+55.29443464)/4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
